import {
    CommaDelimitedPlayerIds,
    CommaDelimitedCards,
    CommaDelimitedCoordinates,
    CommaDelimitedIds,
    CommaDelimitedMacros,
    CommaDelimitedStatusMarkers,
    HexColorString,
    JSONArray,
    Layer,
    RBGColorString,
    CharacterId,
    Id,
    JSONString,
    PageId,
    PlayerId,
    TurnOrder,
    CustomFXDefinition,
} from "./types";

/**
 * Returns a hash of Roll20Object _types to functions "filling in" default values for each.
 */
export const getShapeDefaults = ({
    idGenerator,
}: {
    idGenerator: () => Id;
}) => {
    return {
        ability: (obj: any = {}) => ({
            _id: idGenerator(),
            _characterid: "" as CharacterId,
            name: "",
            description: "",
            action: "",
            istokenaction: false,
            ...obj,
            _type: "ability",
        }),
        attribute: (obj: any = {}) => ({
            _id: idGenerator(),
            _characterid: "" as CharacterId,
            name: "",
            current: "",
            max: "",
            ...obj,
            _type: "attribute",
        }),
        campaign: (obj: any = {}) => ({
            _id: "root" as Id,
            turnorder: "" as TurnOrder,
            initiativepage: false,
            playerpageid: false,
            playerspecificpages: false,
            _journalfolder: "" as JSONString,
            _jukeboxfolder: "" as JSONString,
            ...obj,
            _type: "campaign",
        }),
        card: (obj: any = {}) => ({
            _id: idGenerator(),
            name: "",
            avatar: "",
            _deckid: "" as Id,
            ...obj,
            _type: "card",
        }),
        character: (obj: any = {}) => ({
            _id: idGenerator() as CharacterId,
            name: "",
            avatar: "",
            bio: "",
            gmnotes: "",
            archived: false,
            inplayerjournals: "" as CommaDelimitedPlayerIds,
            controlledby: "" as CommaDelimitedPlayerIds,
            _defaulttoken: "",
            ...obj,
            _type: "character",
        }),
        custfx: (obj: any = {}) => ({
            _id: idGenerator(),
            name: "",
            definition: {} as CustomFXDefinition,
            ...obj,
            _type: "custfx",
        }),
        deck: (obj: any = {}) => ({
            _id: idGenerator(),
            name: "",
            _currentDeck: "" as CommaDelimitedCards,
            _currentIndex: -1,
            _currentCardShown: true,
            showplayers: true,
            playerscandraw: true,
            avatar: "",
            shown: false,
            players_seenumcards: true,
            players_seefrontofcards: false,
            gm_seenumcards: true,
            gm_seefrontofcards: false,
            infinitecards: false,
            _cardSequencer: -1,
            cardsplayed: "faceup",
            defaultheight: "",
            defaultwidth: "",
            discardpilemode: "none",
            _discardPile: "" as CommaDelimitedCards,
            ...obj,
            _type: "deck",
        }),
        graphic: (obj: any = {}) => ({
            _id: idGenerator(),
            _subtype: "token",
            left: 0,
            top: 0,
            width: 0,
            height: 0,
            rotation: 0,
            layer: "",
            isdrawing: false,
            flipv: false,
            fliph: false,
            name: "",
            gmnotes: "",
            controlledby: "" as CommaDelimitedPlayerIds,
            bar1_value: "",
            bar2_value: "",
            bar3_value: "",
            bar1_max: "",
            bar2_max: "",
            bar3_max: "",
            aura1_radius: "",
            aura2_radius: "",
            aura1_color: "#FFFF99" as HexColorString,
            aura2_color: "#59E594" as HexColorString,
            aura1_square: false,
            aura2_square: false,
            tint_color: "transparent",
            statusmarkers: "" as CommaDelimitedStatusMarkers,
            token_markers: "" as JSONArray,
            showname: false,
            showplayers_name: false,
            showplayers_bar1: false,
            showplayers_bar2: false,
            showplayers_bar3: false,
            showplayers_aura1: false,
            showplayers_aura2: false,
            playersedit_name: true,
            playersedit_bar1: true,
            playersedit_bar2: true,
            playersedit_bar3: true,
            playersedit_aura1: true,
            playersedit_aura2: true,
            light_radius: "",
            light_dimradius: "",
            light_otherplayers: false,
            light_hassight: false,
            light_angle: "360",
            light_losangle: "360",
            lastmove: "" as CommaDelimitedCoordinates,
            light_multiplier: "1",
            imgsrc: "",
            _pageid: idGenerator() as PageId,
            adv_fow_view_distance: "",
            ...obj,
            _type: "graphic",
        }),
        hand: (obj: any = {}) => ({
            _id: idGenerator(),
            ...obj,
            _parentid: "" as PlayerId,
            currentView: "bydeck",
            currentHand: "" as CommaDelimitedCards,
            _type: "hand",
        }),
        handout: (obj: any = {}) => ({
            _id: idGenerator(),
            avatar: "",
            name: "Mysterious Note",
            notes: "",
            gmnotes: "",
            inplayerjournals: "" as CommaDelimitedPlayerIds,
            archived: false,
            controlledby: "" as CommaDelimitedPlayerIds,
            ...obj,
            _type: "handout",
        }),
        jukeboxtrack: (obj: any = {}) => ({
            _id: idGenerator(),
            playing: false,
            softstop: false,
            title: "",
            volume: 30,
            loop: false,
            ...obj,
            _type: "jukeboxtrack",
        }),
        macro: (obj: any = {}) => ({
            _id: idGenerator(),
            _playerid: "" as PlayerId,
            name: "",
            action: "",
            visibleto: "" as CommaDelimitedPlayerIds,
            istokenaction: false,
            ...obj,
            _type: "macro",
        }),
        page: (obj: any = {}) => ({
            _id: idGenerator(),
            _zorder: "" as CommaDelimitedIds,
            name: "",
            showgrid: true,
            showdarkness: false,
            showlighting: false,
            width: 25,
            height: 25,
            snapping_increment: 1,
            grid_opacity: 0.5,
            fog_opacity: 0.35,
            background_color: "#FFFFFF" as HexColorString,
            gridcolor: "#C0C0C0" as HexColorString,
            grid_type: "square",
            scale_number: 5,
            scale_units: "ft",
            gridlabels: false,
            diagonaltype: "foure",
            archived: false,
            lightupdatedrop: false,
            lightenforcelos: false,
            lightrestrictmove: false,
            lightglobalillum: false,
            ...obj,
            _type: "page",
        }),
        path: (obj: any = {}) => ({
            _id: idGenerator(),
            _pageid: idGenerator() as PageId,
            _path: "" as JSONString,
            fill: "transparent",
            stroke: "#000000" as HexColorString,
            rotation: 0,
            layer: "" as Layer,
            stroke_width: 5,
            width: 0,
            height: 0,
            top: 0,
            left: 0,
            scaleX: 1,
            scaleY: 1,
            controlledby: "" as CommaDelimitedPlayerIds,
            ...obj,
            _type: "path",
        }),
        player: (obj: any = {}) => ({
            _id: idGenerator() as PlayerId,
            _d20userid: idGenerator(),
            _displayname: "",
            _online: false,
            _lastpage: "",
            _macrobar: "" as CommaDelimitedMacros,
            speakingas: "",
            color: "#13B9F0" as HexColorString,
            showmacrobar: false,
            ...obj,
            _type: "player",
        }),
        rollabletable: (obj: any = {}) => ({
            _id: idGenerator(),
            name: "new-table",
            showplayers: true,
            ...obj,
            _type: "rollabletable",
        }),
        text: (obj: any = {}) => ({
            _id: idGenerator(),
            _pageid: idGenerator() as PageId,
            top: 0,
            left: 0,
            width: 0,
            height: 0,
            text: "",
            font_size: 16,
            rotation: 0,
            color: "rgb(0, 0, 0)" as RBGColorString,
            font_family: "Arial",
            layer: "" as Layer,
            controlledby: "" as CommaDelimitedPlayerIds,
            ...obj,
            _type: "text",
        }),
        tableitem: (obj: any = {}) => ({
            _id: idGenerator(),
            _rollabletableid: "" as Id,
            name: "new-table",
            avatar: "",
            weight: "1",
            ...obj,
            _type: "tableitem",
        }),
    } as const;
};
