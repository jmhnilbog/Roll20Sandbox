import { Logger } from '../Logger';
import { Roll20ObjectInterface } from '../Roll20Object';
import { Id } from '../Roll20Object/types';
import { ChatMessage, Coord2D, FxBetweenNames, FxNames, Roll20EventName } from './types';
import _ from 'underscore';
export declare const createRoll20Sandbox: ({ campaign, state, logger, pool, idGenerator, scope, wrappers, }: {
    campaign?: Roll20ObjectInterface<"campaign", {
        readonly _type: "campaign";
        readonly _id: Id;
        readonly _journalfolder: import("../Roll20Object/types").JSONString;
        readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
        turnorder: import("../Roll20Object/types").TurnOrder;
        initiativepage: false | Id;
        playerpageid: false | Id;
        playerspecificpages: Record<Id, Id>;
    }, "_type" | "_id" | "_journalfolder" | "_jukeboxfolder" | "turnorder" | "initiativepage" | "playerpageid" | "playerspecificpages"> | undefined;
    state?: Record<string, any> | undefined;
    logger?: {
        trace: (...rest: any[]) => any;
        debug: (...rest: any[]) => any;
        info: (...rest: any[]) => any;
        warn: (...rest: any[]) => any;
        error: (...rest: any[]) => any;
        fatal: (...rest: any[]) => any;
        child: (obj?: Partial<{
            logLevel: "TRACE" | "DEBUG" | "INFO" | "WARN" | "ERROR" | "FATAL";
            logName: string;
            emissionFn: Function;
        }>) => any;
    } | undefined;
    idGenerator: () => Id;
    pool?: Record<string, any> | undefined;
    scope?: Record<string, any> | undefined;
    wrappers?: Record<string, Function> | undefined;
}) => {
    readonly _: _.UnderscoreStatic;
    readonly state: Record<string, any>;
    readonly Campaign: () => Roll20ObjectInterface<"campaign", {
        readonly _type: "campaign";
        readonly _id: Id;
        readonly _journalfolder: import("../Roll20Object/types").JSONString;
        readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
        turnorder: import("../Roll20Object/types").TurnOrder;
        initiativepage: false | Id;
        playerpageid: false | Id;
        playerspecificpages: Record<Id, Id>;
    }, "_type" | "_id" | "_journalfolder" | "_jukeboxfolder" | "turnorder" | "initiativepage" | "playerpageid" | "playerspecificpages">;
    readonly createObj: <T extends keyof import("../Roll20Object/types").Roll20ObjectShapeTypeMap>(_type: T, obj: any) => {
        _obj: import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T];
        get<K extends keyof import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T]>(key: K, cb?: ((x: any) => import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T][K]) | undefined): import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T][K];
        readonly id: Id;
        set<K_1 extends keyof import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T]>(changes: Partial<import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T]>): void;
        set<K_2 extends keyof import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T]>(key: K_2, value: import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T][K_2]): void;
        setWithWorker(changes: Partial<import("../Roll20Object/types").Roll20ObjectShapeTypeMap[T]>): void;
        remove(): any;
    };
    readonly filterObjs: (cb: (obj: any) => boolean) => any[];
    readonly findObjs: (obj: any, { caseInsensitive }?: {
        caseInsensitive?: boolean | undefined;
    }) => any;
    readonly getAllObjs: () => any[];
    readonly getAttrByName: (id: string, name: string, curOrMax?: 'current' | 'max') => any;
    readonly log: (...rest: any[]) => any;
    readonly on: (eventName: Roll20EventName, handler: Function) => void;
    readonly onSheetWorkerCompleted: (cb: () => void) => void;
    readonly playerIsGM: (playerId: string) => boolean;
    readonly playJukeboxPlaylist: () => void;
    readonly randomInteger: (max: number) => number;
    readonly sendChat: (speakingAs: ChatMessage['who'], message: ChatMessage['content'], cb?: ((msgs: ChatMessage[]) => void) | undefined, { noarchive, use3d }?: {
        noarchive?: boolean | undefined;
        use3d?: boolean | undefined;
    }) => void;
    readonly sendPing: (left: number, top: number, pageId: string, playerId?: string | undefined, moveAll?: boolean, visibleTo?: string | string[] | undefined) => void;
    readonly spawnFx: (left: number, top: number, typeColor: FxNames, pageId: string) => void;
    readonly spawnFxBetweenPoints: (start: Coord2D, end: Coord2D, typeColor: FxBetweenNames, pageId: string) => void;
    readonly spawnFxWithDefinition: (left: string, top: string, definition: Record<string, any>, pageId: string) => void;
    /**
     * Mocked version of stopJukeboxPlaylist(), which does nothing.
     */
    readonly stopJukeboxPlaylist: () => void;
    /**
     * Mocked version of toBack(), which does nothing.
     */
    readonly toBack: (obj: Roll20ObjectInterface) => void;
    /**
     * Mocked version of toFront(), which does nothing.
     */
    readonly toFront: (obj: {
        _obj: {
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        };
        get<K_3 extends ("_type" | "_id") & ("_type" | "_id" | `status_${import("../Roll20Object/types").StatusMarker}` | "name" | "gmnotes" | "controlledby" | "_subtype" | "_pageid" | "_cardid" | "imgsrc" | "bar1_link" | "bar2_link" | "bar3_link" | "represents" | "left" | "top" | "width" | "height" | "rotation" | "layer" | "isdrawing" | "flipv" | "fliph" | "bar1_value" | "bar2_value" | "bar3_value" | "bar1_max" | "bar2_max" | "bar3_max" | "aura1_radius" | "aura2_radius" | "aura1_color" | "aura2_color" | "aura1_square" | "aura2_square" | "tint_color" | "statusmarkers" | "token_markers" | "showname" | "showplayers_name" | "showplayers_bar1" | "showplayers_bar2" | "showplayers_bar3" | "showplayers_aura1" | "showplayers_aura2" | "playersedit_name" | "playersedit_bar1" | "playersedit_bar2" | "playersedit_bar3" | "playersedit_aura1" | "playersedit_aura2" | "light_radius" | "light_dimradius" | "light_otherplayers" | "light_hassight" | "light_angle" | "light_losangle" | "lastmove" | "light_multiplier" | "adv_fow_view_distance")>(key: K_3, cb?: ((x: any) => ({
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        })[K_3]) | undefined): ({
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        })[K_3];
        readonly id: Id;
        set<K_4 extends ("_type" | "_id") & ("_type" | "_id" | `status_${import("../Roll20Object/types").StatusMarker}` | "name" | "gmnotes" | "controlledby" | "_subtype" | "_pageid" | "_cardid" | "imgsrc" | "bar1_link" | "bar2_link" | "bar3_link" | "represents" | "left" | "top" | "width" | "height" | "rotation" | "layer" | "isdrawing" | "flipv" | "fliph" | "bar1_value" | "bar2_value" | "bar3_value" | "bar1_max" | "bar2_max" | "bar3_max" | "aura1_radius" | "aura2_radius" | "aura1_color" | "aura2_color" | "aura1_square" | "aura2_square" | "tint_color" | "statusmarkers" | "token_markers" | "showname" | "showplayers_name" | "showplayers_bar1" | "showplayers_bar2" | "showplayers_bar3" | "showplayers_aura1" | "showplayers_aura2" | "playersedit_name" | "playersedit_bar1" | "playersedit_bar2" | "playersedit_bar3" | "playersedit_aura1" | "playersedit_aura2" | "light_radius" | "light_dimradius" | "light_otherplayers" | "light_hassight" | "light_angle" | "light_losangle" | "lastmove" | "light_multiplier" | "adv_fow_view_distance")>(changes: Partial<{
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        }>): void;
        set<K_5 extends ("_type" | "_id") & ("_type" | "_id" | `status_${import("../Roll20Object/types").StatusMarker}` | "name" | "gmnotes" | "controlledby" | "_subtype" | "_pageid" | "_cardid" | "imgsrc" | "bar1_link" | "bar2_link" | "bar3_link" | "represents" | "left" | "top" | "width" | "height" | "rotation" | "layer" | "isdrawing" | "flipv" | "fliph" | "bar1_value" | "bar2_value" | "bar3_value" | "bar1_max" | "bar2_max" | "bar3_max" | "aura1_radius" | "aura2_radius" | "aura1_color" | "aura2_color" | "aura1_square" | "aura2_square" | "tint_color" | "statusmarkers" | "token_markers" | "showname" | "showplayers_name" | "showplayers_bar1" | "showplayers_bar2" | "showplayers_bar3" | "showplayers_aura1" | "showplayers_aura2" | "playersedit_name" | "playersedit_bar1" | "playersedit_bar2" | "playersedit_bar3" | "playersedit_aura1" | "playersedit_aura2" | "light_radius" | "light_dimradius" | "light_otherplayers" | "light_hassight" | "light_angle" | "light_losangle" | "lastmove" | "light_multiplier" | "adv_fow_view_distance")>(key: K_5, value: ({
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        })[K_5]): void;
        setWithWorker(changes: Partial<{
            readonly _type: "campaign";
            readonly _id: Id;
            readonly _journalfolder: import("../Roll20Object/types").JSONString;
            readonly _jukeboxfolder: import("../Roll20Object/types").JSONString;
            turnorder: import("../Roll20Object/types").TurnOrder;
            initiativepage: false | Id;
            playerpageid: false | Id;
            playerspecificpages: Record<Id, Id>;
        } | {
            readonly _id: Id;
            readonly _type: "ability";
            readonly _characterid: Id;
            name: string;
            description: string;
            action: string;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "attribute";
            readonly _characterid: Id;
            name: string;
            current: string | number;
            max: string | number;
        } | {
            readonly _type: "card";
            readonly _id: Id;
            readonly _deckid: Id;
            name: string;
            avatar: string;
        } | {
            readonly _id: Id;
            readonly _type: "character";
            avatar: string;
            name: string;
            bio: string;
            gmnotes: string;
            archived: boolean;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            readonly _defaulttoken: string;
        } | {
            readonly _id: Id;
            readonly _type: "custfx";
            name: string;
            definition: any;
        } | {
            readonly _type: "deck";
            readonly _id: Id;
            name: string;
            _currentDeck: import("../Roll20Object/types").CommaDelimitedCards;
            _currentIndex: number;
            _currentCardShown: boolean;
            showplayers: boolean;
            playerscandraw: boolean;
            avatar: string;
            shown: boolean;
            players_seenumcards: boolean;
            players_seefrontofcards: boolean;
            gm_seenumcards: boolean;
            gm_seefrontofcards: boolean;
            infinitecards: boolean;
            _cardSequencer: number;
            cardsplayed: "faceup" | "facedown";
            defaultheight: string | number;
            defaultwidth: string | number;
            discardpilemode: "none" | "choosebacks" | "choosefronts" | "drawtop" | "drawbottom";
            _discardPile: import("../Roll20Object/types").CommaDelimitedCards;
        } | ({
            readonly _type: "graphic";
            readonly _subtype: "card" | "token";
            readonly _id: string;
            readonly _pageid?: Id | undefined;
            readonly _cardid?: Id | undefined;
            imgsrc?: string | undefined;
            bar1_link?: Id | undefined;
            bar2_link?: Id | undefined;
            bar3_link?: Id | undefined;
            represents?: Id | undefined;
            left: number;
            top: number;
            width: number;
            height: number;
            rotation: number;
            layer: "" | import("../Roll20Object/types").Layer;
            isdrawing: boolean;
            flipv: boolean;
            fliph: boolean;
            name: string;
            gmnotes: string;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            bar1_value: string | number;
            bar2_value: string | number;
            bar3_value: string | number;
            bar1_max: string | number;
            bar2_max: string | number;
            bar3_max: string | number;
            aura1_radius: number | "";
            aura2_radius: number | "";
            aura1_color: import("../Roll20Object/types").HexColorString;
            aura2_color: import("../Roll20Object/types").HexColorString;
            aura1_square: boolean;
            aura2_square: boolean;
            tint_color: import("../Roll20Object/types").HexColorString | "transparent";
            statusmarkers: import("../Roll20Object/types").CommaDelimitedStatusMarkers;
            token_markers: import("../Roll20Object/types").JSONArray;
            showname: boolean;
            showplayers_name: boolean;
            showplayers_bar1: boolean;
            showplayers_bar2: boolean;
            showplayers_bar3: boolean;
            showplayers_aura1: boolean;
            showplayers_aura2: boolean;
            playersedit_name: boolean;
            playersedit_bar1: boolean;
            playersedit_bar2: boolean;
            playersedit_bar3: boolean;
            playersedit_aura1: boolean;
            playersedit_aura2: boolean;
            light_radius: string | number;
            light_dimradius: string | number;
            light_otherplayers: boolean;
            light_hassight: boolean;
            light_angle: string;
            light_losangle: string;
            lastmove: import("../Roll20Object/types").CommaDelimitedCoordinates;
            light_multiplier: string | number;
            adv_fow_view_distance: string | number;
        } & { [key in `status_${import("../Roll20Object/types").StatusMarker}`]?: string | number | boolean | undefined; }) | {
            readonly _id: Id;
            _parentid: Id;
            readonly _type: "hand";
            currentHand: import("../Roll20Object/types").CommaDelimitedCards;
            currentView: "bydeck" | "bycard";
        } | {
            readonly _id: Id;
            readonly _type: "handout";
            avatar: string;
            name: string;
            notes: string;
            gmnotes: string;
            inplayerjournals: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            archived: boolean;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "jukeboxtrack";
            playing: boolean;
            softstop: boolean;
            title: string;
            volume: number;
            loop: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "macro";
            readonly _playerid: Id;
            name: string;
            action: string;
            visibleto: import("../Roll20Object/types").CommaDelimitedPlayerIds;
            istokenaction: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "page";
            readonly _zorder: import("../Roll20Object/types").CommaDelimitedIds;
            name: string;
            showgrid: boolean;
            showdarkness: boolean;
            showlighting: boolean;
            width: number;
            height: number;
            snapping_increment: number;
            grid_opacity: number;
            fog_opacity: number;
            background_color: import("../Roll20Object/types").HexColorString;
            gridcolor: import("../Roll20Object/types").HexColorString;
            grid_type: "square" | "hex" | "hexr";
            scale_number: number;
            scale_units: string;
            gridlabels: boolean;
            diagonaltype: "foure" | "pythagorean" | "threefive" | "manhattan";
            archived: boolean;
            lightupdatedrop: boolean;
            lightenforcelos: boolean;
            lightrestrictmove: boolean;
            lightglobalillum: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "path";
            readonly _pageid: Id;
            _path: import("../Roll20Object/types").JSONString;
            fill: import("../Roll20Object/types").HexColorString | "transparent";
            stroke: import("../Roll20Object/types").HexColorString | "transparent";
            rotation: number;
            layer: import("../Roll20Object/types").Layer;
            stroke_width: number;
            width: number;
            height: number;
            top: number;
            left: number;
            scaleX: number;
            scaleY: number;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "player";
            readonly _d20userid: Id;
            readonly _displayname: string;
            readonly _online: boolean;
            readonly _lastpage: "" | Id;
            readonly _macrobar: import("../Roll20Object/types").CommaDelimitedMacros;
            speakingas: "" | Id;
            color: import("../Roll20Object/types").HexColorString;
            showmacrobar: boolean; /**
             * Mocked version of stopJukeboxPlaylist(), which does nothing.
             */
        } | {
            readonly _id: Id;
            readonly _type: "rollabletable";
            name: string;
            showplayers: boolean;
        } | {
            readonly _id: Id;
            readonly _type: "text";
            readonly _pageid: Id;
            top: number;
            left: number;
            width: number;
            height: number;
            text: string;
            font_size: number;
            rotation: number;
            color: import("../Roll20Object/types").RBGColorString;
            font_family: import("../Roll20Object/types").FontFamily;
            layer: import("../Roll20Object/types").Layer;
            controlledby: import("../Roll20Object/types").CommaDelimitedPlayerIds;
        } | {
            readonly _id: Id;
            readonly _type: "tableitem";
            readonly _rollabletableid: Id;
            avatar: string;
            name: string;
            weight: string;
        }>): void;
        remove(): any;
    }) => void;
} & {
    _fireEvent: (eventName: Roll20EventName, ...rest: any) => void;
};
export declare type Sandbox = ReturnType<typeof createRoll20Sandbox>;
export declare const promoteSandbox: (sandbox: Sandbox, keys: (keyof Sandbox)[], scope?: Record<string, any>) => Record<string, any>;
//# sourceMappingURL=api.d.ts.map